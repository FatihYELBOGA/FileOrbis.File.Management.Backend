// <auto-generated />
using System;
using FileOrbis.File.Management.Backend.Configurations.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FileOrbis.File.Management.Backend.Migrations
{
    [DbContext(typeof(Database))]
    [Migration("20240403115846_AddedFavoritesTable")]
    partial class AddedFavoritesTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FileOrbis.File.Management.Backend.Models.FavoriteFiles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteFiles");
                });

            modelBuilder.Entity("FileOrbis.File.Management.Backend.Models.FavoriteFolders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FolderId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("UserId");

                    b.ToTable("FavoriteFolders");
                });

            modelBuilder.Entity("FileOrbis.File.Management.Backend.Models.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FolderId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Trashed")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("FileOrbis.File.Management.Backend.Models.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentFolderId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Trashed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentFolderId");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("FileOrbis.File.Management.Backend.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("FileOrbis.File.Management.Backend.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("RootFolderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RootFolderId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FileOrbis.File.Management.Backend.Models.FavoriteFiles", b =>
                {
                    b.HasOne("FileOrbis.File.Management.Backend.Models.File", "File")
                        .WithMany("InFavorites")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FileOrbis.File.Management.Backend.Models.User", "User")
                        .WithMany("FavoriteFiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FileOrbis.File.Management.Backend.Models.FavoriteFolders", b =>
                {
                    b.HasOne("FileOrbis.File.Management.Backend.Models.Folder", "Folder")
                        .WithMany("InFavorites")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FileOrbis.File.Management.Backend.Models.User", "User")
                        .WithMany("FavoriteFolders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Folder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FileOrbis.File.Management.Backend.Models.File", b =>
                {
                    b.HasOne("FileOrbis.File.Management.Backend.Models.Folder", "Folder")
                        .WithMany("SubFiles")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("FileOrbis.File.Management.Backend.Models.Folder", b =>
                {
                    b.HasOne("FileOrbis.File.Management.Backend.Models.Folder", "ParentFolder")
                        .WithMany("SubFolders")
                        .HasForeignKey("ParentFolderId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ParentFolder");
                });

            modelBuilder.Entity("FileOrbis.File.Management.Backend.Models.RefreshToken", b =>
                {
                    b.HasOne("FileOrbis.File.Management.Backend.Models.User", "User")
                        .WithOne("RefreshToken")
                        .HasForeignKey("FileOrbis.File.Management.Backend.Models.RefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FileOrbis.File.Management.Backend.Models.User", b =>
                {
                    b.HasOne("FileOrbis.File.Management.Backend.Models.Folder", "RootFolder")
                        .WithOne("RootFolderUser")
                        .HasForeignKey("FileOrbis.File.Management.Backend.Models.User", "RootFolderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RootFolder");
                });

            modelBuilder.Entity("FileOrbis.File.Management.Backend.Models.File", b =>
                {
                    b.Navigation("InFavorites");
                });

            modelBuilder.Entity("FileOrbis.File.Management.Backend.Models.Folder", b =>
                {
                    b.Navigation("InFavorites");

                    b.Navigation("RootFolderUser")
                        .IsRequired();

                    b.Navigation("SubFiles");

                    b.Navigation("SubFolders");
                });

            modelBuilder.Entity("FileOrbis.File.Management.Backend.Models.User", b =>
                {
                    b.Navigation("FavoriteFiles");

                    b.Navigation("FavoriteFolders");

                    b.Navigation("RefreshToken")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
